import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    ext {
        deps = [
                adobeMobileServices: '4.18.2',
                advrecyclerview    : '1.0.0',
                androidInstantApps : '1.1.0',
                appsFlyer          : '5.4.0',
                assistedInject     : '0.5.2',
                autoService        : '1.0-rc7',
                circleindicator    : '2.1.4',
                dagger             : '2.28.3',
                eventbus           : '3.2.0',
                facebook           : '7.1.0',
                facebookFlipper    : '0.52.1',
                findbugs           : '3.0.2',
                gradleAndroidPlugin: '4.0.1',
                gtoSupport         : '3.6.2-SNAPSHOT',
                guava              : '29.0-android',
                hamcrest           : '2.2',
                jacoco             : '0.8.5',
                jsoup              : '1.13.1',
                junit              : '4.13',
                kotlin             : '1.3.72',
                kotlinCoroutines   : '1.3.8',
                leakcanary         : '2.4',
                materialDesign     : '1.2.0',
                mockito            : '3.5.6',
                mockitoKotlin      : '2.1.0',
                moshi              : '1.9.3',
                okhttp3            : '3.12.12',
                picasso            : '2.71828',
                picassoTransforms  : '2.2.1',
                retrofit2          : '2.6.4',
                robolectric        : '4.3.1',
                scarlet            : '0.1.10',
                snowplow           : '1.5.0',
                splitties          : '3.0.0-alpha06',
                taptargetview      : '1.13.0',
                thekey             : '4.0.0',
                timber             : '4.7.1',
                tinderStateMachine : '0.2.0',
                weakdelegate       : '1.0.1',
                youtubeplayer      : '10.0.5'
        ]
        deps.androidX = [
                activity          : '1.1.0',
                annotation        : '1.1.0',
                appCompat         : '1.2.0',
                archCore          : '2.1.0',
                browser           : '1.2.0',
                cardView          : '1.0.0',
                collection        : '1.1.0',
                concurrent        : '1.1.0',
                constraintLayout  : '2.0.1',
                core              : '1.3.1',
                databinding       : deps.gradleAndroidPlugin,
                fragment          : '1.2.5',
                lifecycle         : '2.2.0',
                loader            : '1.1.0',
                multidex          : '2.0.1',
                recyclerView      : '1.1.0',
                room              : '2.2.5',
                swipeRefreshLayout: '1.1.0',
                test              : '1.2.0',
                testJUnit         : '1.1.1',
                viewPager2        : '1.0.0',
                work              : '2.4.0',
        ]
        deps.firebase = [
                core          : '17.5.0',
                crashlytics   : '17.2.1',
                inAppMessaging: '19.1.0',
                messaging     : '20.2.4',
                perf          : '19.0.8',
        ]
        uris = [
                mobileContentApi: [
                        stage     : "https://mobile-content-api-stage.cru.org/",
                        production: "https://mobile-content-api.cru.org/"
                ]
        ]
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${deps.gradleAndroidPlugin}"
        classpath 'com.google.firebase:perf-plugin:1.3.1'
        classpath 'com.google.firebase:firebase-appdistribution-gradle:2.0.1'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.2.0'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin}"

        // HACK: use master-SNAPSHOT version to work around a gradle 6 incompatibility with v0.1.4 of the jacoco-android plugin
//        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'
        classpath 'com.github.arturdm:jacoco-android-gradle-plugin:master-SNAPSHOT'
    }
}

plugins {
    id "com.getkeepsafe.dexcount" version "1.0.4" apply false
    id "de.undercouch.download" version "4.1.1" apply false
    id "org.ajoberstar.grgit" version "4.0.2"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1"
}

group 'org.cru.android'
version '5.3.2-SNAPSHOT'
ext.versionCode = grgit.log(includes:['HEAD']).size() + 4029765

// define dependency versions for this project
ext {
    applicationId = 'org.keynote.godtools.android'
    compileSdk    = 29
    minSdk        = 19
    minSdkFeature = 21
    targetSdk     = 29
}

// configure dependency resolution
subprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/' }
    }

    configurations.all { configuration ->
        configuration.resolutionStrategy {
            force "androidx.annotation:annotation:${deps.androidX.annotation}"
            force "androidx.collection:collection:${deps.androidX.collection}"
            force "androidx.fragment:fragment:${deps.androidX.fragment}"
            force "androidx.lifecycle:lifecycle-runtime:${deps.androidX.lifecycle}"
            force "androidx.loader:loader:${deps.androidX.loader}"
            force "androidx.multidex:multidex:${deps.androidX.multidex}"
            force "junit:junit:${deps.junit}"

            // force the correct version of transitive coroutine libraries
            force "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:${deps.kotlinCoroutines}"

            // XXX: Force okhttp3 to older version to support older versions of Android.
            // XXX: This can go away once we bump minimum android version to API-21+
            force "com.squareup.okhttp3:okhttp:${deps.okhttp3}"

            dependencySubstitution {
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}")

                // use the new condensed version of hamcrest
                substitute module('org.hamcrest:hamcrest-core') with module("org.hamcrest:hamcrest:${deps.hamcrest}")
                substitute module('org.hamcrest:hamcrest-library') with module("org.hamcrest:hamcrest:${deps.hamcrest}")

                // use regular moshi library instead of moshi-kotlin, any Kotlin moshi models should use moshi-kotlin-codegen instead
                substitute module('com.squareup.moshi:moshi-kotlin') with module("com.squareup.moshi:moshi:${deps.moshi}")

                // HACK: utilize https://github.com/square/AssistedInject/pull/121 until it is in an official release
                substitute module('com.squareup.inject:assisted-inject-processor-dagger2') with module('com.github.davidliu.AssistedInject:assisted-inject-processor-dagger2:268bff6')
            }

            // HACK: Fix transitive auto-service dependency until robolectric contains https://github.com/robolectric/robolectric/pull/5432 fix
            // Force latest versions of auto-service so we can perform appropriate dependency substitution.
            force "com.google.auto.service:auto-service:${deps.autoService}"
            force "com.google.auto.service:auto-service-annotations:${deps.autoService}"
            String lowercaseName = configuration.name.toLowerCase(Locale.US)
            if (!lowercaseName.contains("compileonly") && !lowercaseName.contains("kapt") &&
                    !lowercaseName.contains("annotationprocessor")) {
                dependencySubstitution {
                    substitute module('com.google.auto.service:auto-service') with module("com.google.auto.service:auto-service-annotations:${deps.autoService}")
                }
            }
        }
    }
}

// base app plugins
configure(subprojects.findAll { it.path == ":app" }) {
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'jacoco-android'
}

// base library plugins
configure(subprojects.findAll { it.path.startsWith(":library:") || it.path.startsWith(":ui:") }) {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'jacoco-android'
}

// common config
subprojects {
    beforeEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion compileSdk

                defaultConfig {
                    versionCode rootProject.versionCode

                    minSdkVersion minSdk
                    targetSdkVersion targetSdk

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                kotlinOptions {
                    jvmTarget = JavaVersion.VERSION_1_8.toString()
                    freeCompilerArgs += '-Xjvm-default=enable'
                }
                lintOptions {
                    lintConfig rootProject.file("analysis/lint/lint.xml")
                }
                testOptions {
                    unitTests {
                        includeAndroidResources = true

                        all {
                            // increase unit tests max heap size
                            jvmArgs "-Xmx2g"

                            // enable only SDKs we actually support in robolectric
                            // TODO: SDK >= 29 requires Java 9 which we don't currently support
                            systemProperty 'robolectric.enabledSdks', (minSdk..28).join(" ")
                        }
                    }
                }
            }

            dependencies {
                compileOnly "androidx.annotation:annotation:${deps.androidX.annotation}"
                compileOnly "com.google.code.findbugs:jsr305:${deps.findbugs}"

                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}"

                implementation "com.jakewharton.timber:timber:${deps.timber}"

                testImplementation "androidx.test.ext:junit:${deps.androidX.testJUnit}"
                testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${deps.mockitoKotlin}"
                testImplementation "junit:junit:${deps.junit}"
                testImplementation "org.mockito:mockito-inline:${deps.mockito}"
                testImplementation "org.robolectric:robolectric:${deps.robolectric}"
            }
        }

        if (project.hasProperty('kapt')) {
            // don't include the compile classpath when looking for annotation processors
            kapt.includeCompileClasspath = false
        }
    }
}

// common library config
configure(subprojects.findAll { it.path.startsWith(":library:") || it.path.startsWith(":ui:") }) {
    beforeEvaluate {
        android {
            defaultConfig {
                multiDexKeepProguard rootProject.file('multidex-keep.pro')
            }

            buildTypes {
                debug {
                    // HACK: Unfortunately we cannot target androidTest builds with multidex only, so we have to target
                    //       all debug builds so that androidTest works when multidex is required.
                    multiDexEnabled true
                }
            }
        }

        // disable lint checks
        tasks.lint.enabled = false
    }
}

// configure checkstyle
subprojects {
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.0'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('analysis/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        ['checkProductionRelease', 'checkProductionDebug', 'checkStageDebug', 'checkRelease', 'checkDebug', 'check'].each {
            project.tasks.findByName(it)?.dependsOn('checkstyle')
        }
    }
}

// configure ktlint
subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }
}

// jacoco config
subprojects {
    beforeEvaluate { project ->
        if (project.hasProperty('jacoco')) {
            jacoco.toolVersion = deps.jacoco

            if (project.hasProperty('android')) {
                android.testOptions.unitTests.all {
                    jacoco.includeNoLocationClasses = true
                }
            }
        }
    }
}
