import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    ext {
        bundledContent = [
                tools               : ['kgp', 'fourlaws', 'satisfied', 'teachmetoshare'],
                attachments         : ['attr-banner', 'attr-banner-about'],
                languages           : ['en'],
                downloadTranslations: false,
        ]
        uris = [
                mobileContentApi: [
                        stage     : "https://mobile-content-api-stage.cru.org/",
                        production: "https://mobile-content-api.cru.org/"
                ]
        ]
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.android.gradlePlugin
        classpath libs.firebase.appdistribution.gradlePlugin
        classpath libs.firebase.crashlytics.gradlePlugin
        classpath libs.firebase.perf.gradlePlugin
        classpath libs.google.services.gradlePlugin
        classpath libs.hilt.gradlePlugin
        classpath libs.kotlin.gradlePlugin
    }
}

plugins {
    alias libs.plugins.grgit
    alias libs.plugins.junitJacoco
    alias libs.plugins.ktlint
    id "de.undercouch.download" version "5.0.1" apply false
}

version '6.0.0-SNAPSHOT'
ext.versionCode = grgit.log(includes:['HEAD']).size() + 4029265

// define dependency versions for this project
ext {
    applicationId = 'org.keynote.godtools.android'
    compileSdk    = 31
    minSdk        = 21
    targetSdk     = 31
}

// configure dependency resolution
allprojects {
    repositories {
        maven {
            url 'https://cruglobal.jfrog.io/artifactory/maven-mobile/'
            content {
                includeGroup 'org.ccci.gto.android'
                includeGroup 'org.ccci.gto.android.testing'
                includeGroup 'org.cru.godtools.kotlin'
                includeGroup 'org.cru.mobile.fork.antlr-kotlin'
            }
        }
        maven {
            url 'https://jitpack.io'
            content {
                includeGroupByRegex 'com\\.github\\..*'
                excludeGroup 'com.github.ajalt.colormath'
            }
        }
        google()
        mavenCentral()
        jcenter {
            content {
                includeModule 'com.duolingo.open', 'rtl-viewpager'
                includeModule 'com.sergivonavi', 'materialbanner'
            }
        }
    }

    configurations.all { configuration ->
        configuration.resolutionStrategy {
            force libs.androidx.annotation
            force libs.androidx.lifecycle.viewmodel.ktx

            dependencySubstitution {
                // use the new condensed version of hamcrest
                substitute module('org.hamcrest:hamcrest-core') with module("${libs.hamcrest.get()}")
                substitute module('org.hamcrest:hamcrest-library') with module("${libs.hamcrest.get()}")
            }
        }
    }
}

// base app plugins
configure(subprojects.findAll { it.path == ":app" }) {
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'
}

// base library plugins
configure(subprojects.findAll { it.path.startsWith(":library:") || it.path.startsWith(":ui:") }) {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    dependencies {
        androidTestImplementation libs.gtoSupport.testing.okta
        testImplementation libs.gtoSupport.testing.okta
    }
}

// base feature plugins
configure(subprojects.findAll { it.path.startsWith(":feature:") }) {
    apply plugin: "com.android.dynamic-feature"
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    android {
        flavorDimensions "env"
        productFlavors {
            stage {
                dimension "env"
            }
            production {
                dimension "env"
            }
        }
    }

    dependencies {
        implementation project(":app")
    }
}

// common config
subprojects {
    beforeEvaluate { project ->
        if (project.hasProperty('android')) {
            android {
                compileSdkVersion rootProject.compileSdk

                defaultConfig {
                    versionCode rootProject.versionCode

                    minSdkVersion rootProject.minSdk
                    targetSdkVersion rootProject.targetSdk
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_11
                    targetCompatibility JavaVersion.VERSION_11
                }
                kotlinOptions {
                    jvmTarget = JavaVersion.VERSION_11.toString()
                    freeCompilerArgs += '-Xjvm-default=all'
                }
                lintOptions {
                    lintConfig rootProject.file("analysis/lint/lint.xml")
                }
                testOptions {
                    unitTests {
                        includeAndroidResources = true

                        all {
                            // increase unit tests max heap size
                            jvmArgs "-Xmx2g"
                        }
                    }
                }

                // only include stage variants for the debug buildType
                variantFilter { variant ->
                    if (variant.flavors*.name.contains("stage") && variant.buildType.name != "debug") setIgnore(true)
                }
            }

            dependencies {
                compileOnly libs.androidx.annotation

                implementation libs.kotlin.stdlib

                implementation libs.timber

                testImplementation libs.androidx.test.junit
                testImplementation libs.junit
                testImplementation libs.mockito
                testImplementation libs.mockito.kotlin
                testImplementation libs.robolectric
            }
        }
    }
}

// configure ktlint
subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }
}

// jacoco config
junitJacoco {
    jacocoVersion = libs.versions.jacoco.get()
    includeNoLocationClasses = true
}
allprojects {
    afterEvaluate {
        tasks.withType(Test) {
            jacoco.excludes = ['jdk.internal.*']
        }
    }
}
task jacocoTestReport {
    subprojects.each { dependsOn(it.tasks.withType(JacocoReport)) }
}
allprojects {
    if (gradle.startParameter.excludedTaskNames.contains("test")) {
        // exclude all test type tasks when the test task is excluded
        tasks.withType(Test).all { gradle.startParameter.excludedTaskNames += it.name }
    }
}

if (project.hasProperty('gradleEnterprise')) {
    gradleEnterprise {
        buildScan {
            // automatically accept the scans.gradle.com TOS when running in GHA
            if (System.getenv("GITHUB_ACTIONS")) {
                termsOfServiceUrl = "https://gradle.com/terms-of-service"
                termsOfServiceAgree = "yes"
            }
        }
    }
}
