buildscript {
    ext {
        deps = [
                adobeMobileServices: '4.17.7',
                advrecyclerview    : '0.11.0',
                androidX           : [
                        annotation      : '1.0.0',
                        appCompat       : '1.0.2',
                        archCore        : '2.0.0',
                        browser         : '1.0.0',
                        cardView        : '1.0.0',
                        constraintLayout: '1.1.3',
                        core            : '1.0.1',
                        ktx             : [
                                core    : '1.0.1',
                                fragment: '1.0.0',
                        ],
                        lifecycle       : '2.0.0',
                        multidex        : '2.0.0',
                        percentLayout   : '1.0.0',
                        recyclerView    : '1.0.0',
                        room            : '2.0.0',
                        test            : '1.1.0',
                ],
                androidInstantApps : '1.1.0',
                appSee             : [
                        android         : '2.6.0',
                        plugin          : '1.0.3'
                ],
                butterknife        : '9.0.0-rc2',
                calligraphy        : '2.3.0',
                crashlytics        : '2.9.7',
                eventbus           : '3.1.1',
                evernoteAndroidJob : '1.2.6',
                facebookStetho     : '1.5.0',
                firebase           : [
                        core        : '16.0.6',
                        dynamicLinks: '16.1.5',
                        perf        : '16.2.2',
                ],
                gtoSupport         : '2.0.1',
                guava              : '26.0-android',
                hamcrest           : '1.3',
                jsoup              : '1.11.3',
                junit              : '4.12',
                // XXX: Kotlin 1.3.10 introduces a ButterKnife ViewBinding generation bug with how the R2 resources are
                // XXX: processed. Right now the workaround is to utilize Kotlin 1.2.x
                // XXX: see: https://github.com/JakeWharton/butterknife/issues/974
                kotlin             : '1.2.71',
                ktlint             : '0.29.0',
                leakcanary         : '1.6.2',
                lightweightStream  : '1.2.1',
                materialDesign     : '1.0.0',
                mockito            : '2.17.0',
                mockitoKotlin      : '2.0.0-RC3',
                okhttp3            : '3.11.0',
                picassoTransforms  : '2.2.1',
                playServices       : [
                        analytics: '16.0.6',
                ],
                powermock          : '2.0.0-beta.9',
                retrofit2          : '2.4.0',
                snowplow           : '0.8.0',
                taptargetview      : '1.12.0',
                thekey             : '3.0.0',
                timber             : '4.7.1'
        ]
        uris = [
                mobileContentApi: [
                        stage     : "https://mobile-content-api-stage.cru.org/",
                        production: "https://mobile-content-api.cru.org/"
                ]
        ]
    }

    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'com.google.firebase:perf-plugin:1.2.1'
        classpath 'com.google.gms:google-services:4.3.0'
        classpath "com.appsee:appsee-plugin:${deps.appSee.plugin}"
        classpath "com.jakewharton:butterknife-gradle-plugin:${deps.butterknife}"
        classpath 'io.fabric.tools:gradle:1.29.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin}"
    }
}

plugins {
    id "com.getkeepsafe.dexcount" version "0.8.6" apply false
    id "de.undercouch.download" version "3.4.3" apply false
    id "org.ajoberstar.grgit" version "3.1.1"
}

group 'org.cru.android'
version '5.1.3-SNAPSHOT'
ext.versionCode = (grgit.log(includes:['HEAD']).size() * 2) + 4025200

// define dependency versions for this project
ext {
    applicationId = 'org.keynote.godtools.android'
    compileSdk    = 28
    minSdk        = 16
    minSdkFeature = 21
    targetSdk     = 28
}

subprojects {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
        // XXX: temporary to use beta version of powermock
        maven { url 'https://dl.bintray.com/powermock/maven' }
        maven { url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/' }
        mavenLocal()
    }
}

def checkTasks = ['checkProductionRelease', 'checkProductionDebug', 'checkStageDebug', 'checkRelease', 'checkDebug', 'check']

// configure checkstyle
subprojects {
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.0'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('analysis/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        checkTasks.each {
            project.tasks.findByName(it)?.dependsOn('checkstyle')
        }
    }
}

// configure ktlint
subprojects {
    configurations {
        ktlint
    }
    dependencies {
        // ktlint
        ktlint "com.github.shyiko:ktlint:${deps.ktlint}"
    }
    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "src/**/*.kt"
        args "--reporter=plain?group_by_file"
        args "--reporter=checkstyle,output=${buildDir}/reports/ktlint/ktlint.xml"
    }
    afterEvaluate {
        checkTasks.each {
            project.tasks.findByName(it)?.dependsOn('ktlint')
        }
    }
}

// base library config
configure(subprojects.findAll { it.path.startsWith(":library:") || it.path.startsWith(":ui:") }) {
    apply plugin: 'com.android.library'

    beforeEvaluate {
        android {
            compileSdkVersion compileSdk

            defaultConfig {
                minSdkVersion minSdk
                targetSdkVersion targetSdk

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                multiDexKeepProguard rootProject.file('multidex-keep.pro')
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            lintOptions {
                lintConfig rootProject.file("analysis/lint/lint.xml")
            }

            buildTypes {
                debug {
                    // HACK: Unfortunately we cannot target androidTest builds with multidex only, so we have to target
                    // HACK: all debug builds so that androidTest works when multidex is required.
                    multiDexEnabled true
                }
            }
        }

        dependencies {
            compileOnly "androidx.annotation:annotation:${deps.androidX.annotation}"
            compileOnly 'org.jetbrains:annotations:17.0.0'

            testImplementation "junit:junit:${deps.junit}"
        }

        // disable lint checks
        tasks.lint.enabled = false
    }
}

// base feature config
configure(subprojects.findAll { it.path.startsWith(":feature:") }) {
    apply plugin: 'com.android.feature'

    beforeEvaluate {
        android {
            compileSdkVersion compileSdk

            defaultConfig {
                minSdkVersion minSdkFeature
                targetSdkVersion targetSdk

                versionName rootProject.version
                versionCode rootProject.versionCode

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            lintOptions {
                lintConfig rootProject.file("analysis/lint/lint.xml")
            }

            signingConfigs {
                release {
                    storeFile file(androidKeystorePath)
                    storePassword androidKeystoreStorePassword
                    keyAlias androidKeystoreKeyAlias
                    keyPassword androidKeystoreKeyPassword
                }
            }

            flavorDimensions "env"
            productFlavors {
                stage {
                    dimension "env"
                }
                production {
                    dimension "env"
                }
            }

            buildTypes {
                release {
                    minifyEnabled true
                    // XXX: currently not working for feature modules
//                    shrinkResources true
                    if (signingConfigs.release.storeFile.exists()) {
                        signingConfig signingConfigs.release
                    }
                }
            }

            variantFilter { variant ->
                // stage product flavors
                if (variant.flavors*.name.contains("stage")) {
                    // ignore for non-debug build types
                    if (!variant.buildType.name.equals("debug")) {
                        setIgnore(true)
                    }
                }
            }
        }
    }
}
