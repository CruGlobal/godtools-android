import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.firebase.appdistribution.gradlePlugin
        classpath libs.firebase.crashlytics.gradlePlugin
        classpath libs.firebase.perf.gradlePlugin
        classpath libs.google.services.gradlePlugin
    }
}

plugins {
    alias libs.plugins.hilt apply false
    alias libs.plugins.junitJacoco
    alias libs.plugins.ktlint
}

// common config
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            dependencies {
                implementation libs.kotlin.stdlib

                implementation libs.timber

                // HACK: Fix Manifest merge errors for any classpath that contains the Okta module
                androidTestImplementation(testFixtures(libs.gtoSupport.okta))
                testImplementation(testFixtures(libs.gtoSupport.okta))
            }
        }
    }
}

// configure ktlint
subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        android = true
        version = libs.versions.ktlint.get()
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }

    // HACK: workaround https://github.com/JLLeitschuh/ktlint-gradle/issues/524
    afterEvaluate {
        if (project.hasProperty('android')) {
            android.sourceSets.configureEach {
                java.srcDirs("src/$name/kotlin")
            }
        }
    }
}

// jacoco config
junitJacoco {
    jacocoVersion = libs.versions.jacoco.get()
    includeNoLocationClasses = true
}
allprojects {
    afterEvaluate {
        tasks.withType(Test) {
            jacoco.excludes = ['jdk.internal.*']
        }
    }
}
task jacocoTestReport {
    subprojects.each { dependsOn(it.tasks.withType(JacocoReport)) }
}
allprojects {
    if (gradle.startParameter.excludedTaskNames.contains("test")) {
        // exclude all test type tasks when the test task is excluded
        tasks.withType(Test).all { gradle.startParameter.excludedTaskNames += it.name }
    }
}
