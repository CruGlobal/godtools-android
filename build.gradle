buildscript {
    ext.uris = [
            mobileContentApi: [
                    stage     : "https://mobile-content-api-stage.cru.org/",
                    production: "https://mobile-content-api.cru.org/"
            ]
    ]

    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
        //noinspection GradleDependency
        classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1'
        classpath 'com.newrelic.agent.android:agent-gradle-plugin:5.19.0'
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}

plugins {
    id "de.undercouch.download" version "3.4.3" apply false
    id "org.ajoberstar.grgit" version "2.2.1"
}

group 'org.cru.android'
version '5.0.17'
ext.versionCode = (grgit.log(includes:['HEAD']).size() * 2) + 4026000

// define dependency versions for this project
ext {
    applicationId = 'org.keynote.godtools.android'
    compileSdk    = 27
    minSdk        = 15
    minSdkFeature = 21
    targetSdk     = 27
}
ext.deps = [
        adobeMobileServices  : '4.16.0',
        advrecyclerview      : '0.11.0',
        androidInstantApps   : '1.1.0',
        androidLifecycle     : '1.1.1',
        androidSupport       : '27.1.1',
        androidTestingSupport: '1.0.2',
        butterknife          : '8.7.0',
        calligraphy          : '2.3.0',
        constraintLayout     : '1.1.3',
        crashlytics          : '2.9.5',
        eventbus             : '3.1.1',
        evernoteAndroidJob   : '1.2.5',
        facebookStetho       : '1.5.0',
        gtoSupport           : '1.3.2-SNAPSHOT',
        guava                : '26.0-android',
        hamcrest             : '1.3',
        junit                : '4.12',
        leakcanary           : '1.6.1',
        lightweightStream    : '1.1.9',
        mockito              : '2.17.0',
        multidex             : '1.0.3',
        newrelic             : '5.19.0',
        okhttp3              : '3.11.0',
        picassoTransforms    : '2.2.1',
        playServicesAnalytics: '16.0.1',
        powermock            : '2.0.0-beta.9',
        retrofit2            : '2.4.0',
        room                 : '1.1.1',
        snowplow             : '0.7.0',
        thekey               : '2.0.1-SNAPSHOT',
        timber               : '4.7.1'
]

subprojects {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
        // XXX: temporary to use beta version of powermock
        maven { url 'https://dl.bintray.com/powermock/maven' }
        maven { url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/' }
        mavenLocal()
    }

    configurations.all {
        // force versions when there are conflicts
        resolutionStrategy.force(
                "android.arch.lifecycle:livedata-core:${deps.androidLifecycle}",
                "android.arch.lifecycle:runtime:${deps.androidLifecycle}",
                "android.arch.lifecycle:viewmodel:${deps.androidLifecycle}"
        )
    }
}

// configure checkstyle
subprojects {
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.0'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('analysis/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        if (project.tasks.findByName('check')) {
            check.dependsOn('checkstyle')
        }
    }
}

// base library config
configure(subprojects.findAll { it.path.startsWith(":library:") || it.path.startsWith(":ui:") }) {
    apply plugin: 'com.android.library'

    beforeEvaluate {
        android {
            compileSdkVersion compileSdk

            defaultConfig {
                minSdkVersion minSdk
                targetSdkVersion targetSdk

                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                multiDexKeepProguard rootProject.file('multidex-keep.pro')
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            lintOptions {
                lintConfig rootProject.file("analysis/lint/lint.xml")
            }

            buildTypes {
                debug {
                    // HACK: Unfortunately we cannot target androidTest builds with multidex only, so we have to target
                    // HACK: all debug builds so that androidTest works when multidex is required.
                    multiDexEnabled true
                }
            }
        }

        dependencies {
            compileOnly 'org.jetbrains:annotations:16.0.1'
        }

        // disable lint checks
        tasks.lint.enabled = false
    }
}

// base feature config
configure(subprojects.findAll { it.path.startsWith(":feature:") }) {
    apply plugin: 'com.android.feature'

    beforeEvaluate {
        android {
            compileSdkVersion compileSdk

            defaultConfig {
                minSdkVersion minSdkFeature
                targetSdkVersion targetSdk

                versionName rootProject.version
                versionCode rootProject.versionCode

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            lintOptions {
                lintConfig rootProject.file("analysis/lint/lint.xml")
            }

            signingConfigs {
                release {
                    storeFile file(androidKeystorePath)
                    storePassword androidKeystoreStorePassword
                    keyAlias androidKeystoreKeyAlias
                    keyPassword androidKeystoreKeyPassword
                }
            }

            flavorDimensions "env"
            productFlavors {
                stage {
                    dimension "env"
                }
                production {
                    dimension "env"
                }
            }

            buildTypes {
                release {
                    minifyEnabled true
                    // XXX: currently not working for feature modules
//                    shrinkResources true
                    if (signingConfigs.release.storeFile.exists()) {
                        signingConfig signingConfigs.release
                    }
                }
            }

            variantFilter { variant ->
                // stage product flavors
                if (variant.flavors*.name.contains("stage")) {
                    // ignore for non-debug build types
                    if (!variant.buildType.name.equals("debug")) {
                        setIgnore(true)
                    }
                }
            }
        }
    }
}
