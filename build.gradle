import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    ext {
        deps = [
                adobeMobileServices: '4.18.0',
                advrecyclerview    : '1.0.0',
                androidInstantApps : '1.1.0',
                butterknife        : '10.2.1',
                calligraphy        : '2.3.0',
                circleindicator    : '2.1.4',
                crashlytics        : '2.10.1',
                eventbus           : '3.1.1',
                evernoteAndroidJob : '1.4.2',
                facebook           : '5.15.0',
                facebookStetho     : '1.5.1',
                gtoSupport         : '3.3.0-SNAPSHOT',
                guava              : '28.2-android',
                hamcrest           : '2.2',
                jetbrainsAnnotation: '18.0.0',
                jsoup              : '1.12.1',
                junit              : '4.13',
                kotlin             : '1.3.61',
                leakcanary         : '2.1',
                lightweightStream  : '1.2.1',
                materialDesign     : '1.1.0-rc01',
                mockito            : '3.2.4',
                mockitoKotlin      : '2.1.0',
                okhttp3            : '3.12.8',
                picasso            : '2.71828',
                picassoTransforms  : '2.2.1',
                powermock          : '2.0.5',
                retrofit2          : '2.6.2',
                snowplow           : '1.3.3',
                splitties          : '3.0.0-alpha06',
                taptargetview      : '1.13.0',
                thekey             : '3.0.0',
                timber             : '4.7.1',
                youtubeplayer      : '10.0.5'
        ]
        deps.androidX = [
                annotation        : '1.1.0',
                appCompat         : '1.1.0',
                archCore          : '2.1.0',
                browser           : '1.2.0',
                cardView          : '1.0.0',
                collection        : '1.1.0',
                constraintLayout  : '1.1.3',
                core              : '1.1.0',
                fragment          : '1.2.0',
                lifecycle         : '2.1.0',
                loader            : '1.1.0',
                multidex          : '2.0.1',
                percentLayout     : '1.0.0',
                recyclerView      : '1.1.0',
                room              : '2.2.3',
                swipeRefreshLayout: '1.0.0',
                test              : '1.2.0',
                testJUnit         : '1.1.1',
                viewPager2        : '1.0.0',
        ]
        deps.firebase = [
                core          : '17.2.2',
                inAppMessaging: '19.0.3',
                perf          : '19.0.5',
        ]
        uris = [
                mobileContentApi: [
                        stage     : "https://mobile-content-api-stage.cru.org/",
                        production: "https://mobile-content-api.cru.org/"
                ]
        ]
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'com.google.firebase:perf-plugin:1.3.1'
        classpath 'com.google.firebase:firebase-appdistribution-gradle:1.3.1'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath "com.jakewharton:butterknife-gradle-plugin:${deps.butterknife}"
        classpath 'io.fabric.tools:gradle:1.31.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin}"
    }
}

plugins {
    id "com.getkeepsafe.dexcount" version "1.0.2" apply false
    id "de.undercouch.download" version "4.0.4" apply false
    id "org.ajoberstar.grgit" version "4.0.1"
    id "org.jlleitschuh.gradle.ktlint" version "9.1.1"
}

group 'org.cru.android'
version '5.1.5-SNAPSHOT'
ext.versionCode = grgit.log(includes:['HEAD']).size() + 4029765

// define dependency versions for this project
ext {
    applicationId = 'org.keynote.godtools.android'
    compileSdk    = 29
    minSdk        = 17
    minSdkFeature = 21
    targetSdk     = 29
}

// configure dependency resolution
subprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
        // XXX: temporary to use beta version of powermock
        maven { url 'https://dl.bintray.com/powermock/maven' }
        maven { url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/' }
    }

    configurations.all {
        resolutionStrategy {
            force "androidx.annotation:annotation:${deps.androidX.annotation}"
            force "androidx.core:core:${deps.androidX.core}"
            force "org.jetbrains:annotations:${deps.jetbrainsAnnotation}"

            dependencySubstitution {
                substitute module('org.hamcrest:hamcrest-core') with module("org.hamcrest:hamcrest:${deps.hamcrest}")
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}")
            }
        }
    }
}

def checkTasks = ['checkProductionRelease', 'checkProductionDebug', 'checkStageDebug', 'checkRelease', 'checkDebug', 'check']

// configure checkstyle
subprojects {
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '8.0'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('analysis/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        checkTasks.each {
            project.tasks.findByName(it)?.dependsOn('checkstyle')
        }
    }
}

// configure ktlint
subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }
}

// base library config
configure(subprojects.findAll { it.path.startsWith(":library:") || it.path.startsWith(":ui:") }) {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    beforeEvaluate {
        android {
            compileSdkVersion compileSdk

            defaultConfig {
                minSdkVersion minSdk
                targetSdkVersion targetSdk

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                multiDexKeepProguard rootProject.file('multidex-keep.pro')
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_1_8.toString()
            }
            lintOptions {
                lintConfig rootProject.file("analysis/lint/lint.xml")
            }

            buildTypes {
                debug {
                    // HACK: Unfortunately we cannot target androidTest builds with multidex only, so we have to target
                    // HACK: all debug builds so that androidTest works when multidex is required.
                    multiDexEnabled true
                }
            }
        }

        dependencies {
            compileOnly "androidx.annotation:annotation:${deps.androidX.annotation}"
            compileOnly "org.jetbrains:annotations:${deps.jetbrainsAnnotation}"

            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}"

            implementation "com.jakewharton.timber:timber:${deps.timber}"

            testImplementation "junit:junit:${deps.junit}"
        }

        // disable lint checks
        tasks.lint.enabled = false
    }
}

// base feature config
configure(subprojects.findAll { it.path.startsWith(":feature:") }) {
    apply plugin: 'com.android.feature'

    beforeEvaluate {
        android {
            compileSdkVersion compileSdk

            defaultConfig {
                minSdkVersion minSdkFeature
                targetSdkVersion targetSdk

                versionName rootProject.version
                versionCode rootProject.versionCode

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            lintOptions {
                lintConfig rootProject.file("analysis/lint/lint.xml")
            }

            signingConfigs {
                release {
                    storeFile file(androidKeystorePath)
                    storePassword androidKeystoreStorePassword
                    keyAlias androidKeystoreKeyAlias
                    keyPassword androidKeystoreKeyPassword
                }
            }

            flavorDimensions "env"
            productFlavors {
                stage {
                    dimension "env"
                }
                production {
                    dimension "env"
                }
            }

            buildTypes {
                release {
                    minifyEnabled true
                    // XXX: currently not working for feature modules
//                    shrinkResources true
                    if (signingConfigs.release.storeFile.exists()) {
                        signingConfig signingConfigs.release
                    }
                }
            }

            variantFilter { variant ->
                // stage product flavors
                if (variant.flavors*.name.contains("stage")) {
                    // ignore for non-debug build types
                    if (!variant.buildType.name.equals("debug")) {
                        setIgnore(true)
                    }
                }
            }
        }
    }
}
