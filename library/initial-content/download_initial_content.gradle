import groovy.json.JsonSlurper

apply plugin: 'de.undercouch.download'

android.libraryVariants.all { variant ->
    def mobileContentApi = variant.flavorName.contains("stage") ? uris.mobileContentApi.stage : uris.mobileContentApi.production

    // include the list of downloaded tools and languages as a BuildConfig constant
    variant.buildConfigField('java.util.List<String>', 'BUNDLED_TOOLS', 'java.util.Arrays.asList('
            + bundledContent.tools.collect{ "\"$it\"" }.join(',') + ')')
    variant.buildConfigField('java.util.List<String>', 'BUNDLED_LANGUAGES', 'java.util.Arrays.asList('
            + bundledContent.languages.collect{ "\"$it\"" }.join(',') + ')')

    // create a generated assets directory for the initial content and add it to the most specific source set available.
    def assetGenDir = new File(project.buildDir, "generated/assets/initial-content/" + variant.dirName)

    // generate assets task, this should depend on all tasks we create locally
    def assetGenTask = tasks.getByName("generate${variant.name.capitalize()}Assets")

    // tools json
    def toolsJsonFile = new File(assetGenDir, 'tools.json')
    def downloadToolsTask = tasks.named("prune${variant.name.capitalize()}BundledToolsJson")

    // download translations
    if (bundledContent.downloadTranslations) {
        def translationsDir = new File(assetGenDir, 'translations')
        def downloadTranslationsTask = project.tasks.create("download${variant.name.capitalize()}BundledTranslations") {
            mustRunAfter clean
            dependsOn downloadToolsTask

            doLast {
                def toolsJson = new JsonSlurper().parseText(toolsJsonFile.text)
                def tools = toolsJson.data.findAll {
                    bundledContent.tools.contains(it.attributes.abbreviation)
                }.collect { it.id }
                def languages = toolsJson.included.findAll {
                    it.type == 'language' && bundledContent.languages.contains(it.attributes.code)
                }.collect { it.id }
                def translations = toolsJson.included.findAll {
                    it.type == 'translation' && tools.contains(it.relationships.resource.data.id) && languages.contains(it.relationships.language.data.id)
                }.collect { it.id }

                translations.each { translationId ->
                    download {
                        src "${mobileContentApi}translations/${translationId}"
                        dest new File(translationsDir, "${translationId}.zip")
                        overwrite false
                        tempAndMove true
                        quiet true
                    }
                }
            }
        }
        assetGenTask.dependsOn(downloadTranslationsTask)
    }
}
