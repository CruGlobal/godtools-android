import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

apply plugin: 'de.undercouch.download'

android.libraryVariants.all { variant ->
    // XXX: we hardcode the generated shader assets directory because I couldn't find a public API to get/add a generated output dir. -DMF
    def assetGenDir = new File(project.buildDir, "generated/assets/shaders/" + variant.dirName)
    def assetGenTask = project.tasks.getByName("generate${variant.name.capitalize()}Assets")

    // languages json
    def languagesJson = new File(assetGenDir, 'languages.json')
    def downloadLanguagesTask = project.tasks.create "download${variant.name.capitalize()}BundledLanguages", Download, {
        src 'https://mobile-content-api.cru.org/languages'
        dest languagesJson
        quiet true
    }
    def sanitizeLanguagesTask = project.tasks.create("sanitize${variant.name.capitalize()}BundledLanguages") {
        dependsOn downloadLanguagesTask
        doLast {
            simplifyBundledLanguages(languagesJson)
        }
    }
    assetGenTask.dependsOn(sanitizeLanguagesTask)

    // tools json
    def toolsJson = new File(assetGenDir, 'tools.json')
    def downloadToolsTask = project.tasks.create "download${variant.name.capitalize()}BundledTools", Download, {
        src 'https://mobile-content-api.cru.org/resources?filter[system]=GodTools&include=attachments,latest-translations.language'
        dest toolsJson
        quiet true
    }
    def sanitizeToolsTask = project.tasks.create("sanitize${variant.name.capitalize()}BundledTools") {
        dependsOn downloadToolsTask
        doLast {
            simplifyBundledTools(toolsJson)
        }
    }
//    assetGenTask.dependsOn(sanitizeToolsTask)
}

static def simplifyBundledLanguages(File file) {
    def data = new JsonSlurper().parseText(file.text)

    data.data.each { language ->
        removeJsonApiAttrs(language, 'name', 'direction')
        language.remove('relationships')
    }

    sortJsonApiObject(data)
    String output = new JsonBuilder(data).toPrettyString()
    file.text = output
}

static def simplifyBundledTools(File file) {
    def data = new JsonSlurper().parseText(file.text)

    // update main objects
    data.data.each { tool ->
        removeJsonApiAttrs(tool,
                // attributes
                'manifest', 'onesky-project-id',
                // relationships
                'system', 'translations', 'latest-drafts-translations', 'pages')
    }

    // update included objects
    data.included.each { obj ->
        switch (obj.type) {
            case "attachment":
                removeJsonApiAttrs(obj, "file", "is-zipped")
                break
            case "language":
                obj.remove('relationships')
                removeJsonApiAttrs(obj, 'name', 'direction')
                break
        }
    }

    sortJsonApiObject(data)
    String output = new JsonBuilder(data).toPrettyString()
    file.text = output
}

static def removeJsonApiAttrs(obj, String... attrs) {
    attrs.each {
        obj.attributes?.remove(it)
        obj.relationships?.remove(it)
    }
}

static def sortJsonApiObject(obj) {
    sortJsonApiObjects(obj.data)
    sortJsonApiObjects(obj.included)
}

static def sortJsonApiObjects(objs) {
    objs?.sort { it.id as Integer }
    objs?.sort { it.type }
    objs?.each {
        it.relationships?.each { k, v ->
            if (v.data instanceof List) {
                v.data.sort { it.id as Integer }
            }
        }
    }
}
