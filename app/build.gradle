apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'
apply plugin: 'newrelic'

android {
    compileSdkVersion compileSdk

    defaultConfig {
        applicationId rootProject.applicationId
        versionName rootProject.version
        versionCode rootProject.versionCode + 1

        minSdkVersion minSdk
        targetSdkVersion targetSdk

        proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        proguardFile 'proguard-searchview.pro'

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Crashlytics config
        ext {
            betaDistributionGroupAliasesFilePath = "crashlytics/beta_groups.txt"
            betaDistributionNotifications = false
            betaDistributionReleaseNotes = generateCrashlyticsBetaReleaseNotes()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dexOptions {
        preDexLibraries !project.hasProperty('disablePreDex')
    }
    lintOptions {
        lintConfig rootProject.file("analysis/lint/lint.xml")
        checkDependencies true
    }
    packagingOptions {
        pickFirst 'META-INF/NOTICE.txt'
        pickFirst 'META-INF/LICENSE.txt'
    }

    dataBinding {
        enabled = true
    }

    flavorDimensions "env"
    productFlavors {
        stage {
            dimension "env"
        }
        production {
            dimension "env"
        }
    }

    signingConfigs {
        crashlyticsBeta {
            storeFile rootProject.file(crashlyticsBetaKeystorePath)
            storePassword crashlyticsBetaKeystoreStorePassword
            keyAlias crashlyticsBetaKeystoreKeyAlias
            keyPassword crashlyticsBetaKeystoreKeyPassword
        }
        release {
            storeFile rootProject.file(androidKeystorePath)
            storePassword androidKeystoreStorePassword
            keyAlias androidKeystoreKeyAlias
            keyPassword androidKeystoreKeyPassword
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            multiDexEnabled true

            minifyEnabled false
            shrinkResources false

            if (project.hasProperty('crashlyticsBetaBuild')) {
                signingConfig signingConfigs.crashlyticsBeta
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            if (signingConfigs.release.storeFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    variantFilter { variant ->
        // stage product flavors
        if (variant.flavors*.name.contains("stage")) {
            // ignore for non-debug build types
            if (!variant.buildType.name.equals("debug")) {
                setIgnore(true)
            }
        }
    }
}
kapt {
    arguments {
        arg('eventBusIndex', 'org.cru.godtools.AppEventBusIndex')
    }
}

dependencies {
    implementation project(':library:api')
    implementation project(':library:base')
    implementation project(':library:config')
    implementation project(':library:db')
    implementation project(':library:download-manager')
    implementation project(':library:initial-content')
    implementation project(':library:model')
    implementation project(':library:model-events')
    implementation project(':library:model-loader')
    implementation project(':library:sync')
    implementation project(':library:xml-model')

    implementation project(':ui:account')
    implementation project(':ui:article-aem-renderer')
    implementation project(':ui:article-renderer')
    implementation project(':ui:base')
    implementation project(':ui:base-app')
    implementation project(':ui:shortcuts')
    implementation project(':ui:tract-renderer')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}"

    implementation "androidx.fragment:fragment-ktx:${deps.androidX.ktx.fragment}"
    implementation "androidx.percentlayout:percentlayout:${deps.androidX.percentLayout}"

    implementation "org.ccci.gto.android:gto-support-appcompat:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-compat:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-design:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-eventbus:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-picasso:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-recyclerview:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-sync:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-util:${deps.gtoSupport}"

    implementation "com.crashlytics.sdk.android:crashlytics:${deps.crashlytics}"

    implementation "com.evernote:android-job:${deps.evernoteAndroidJob}"
    implementation "com.getkeepsafe.taptargetview:taptargetview:${deps.taptargetview}"
    implementation "com.google.guava:guava:${deps.guava}"
    implementation "com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:${deps.advrecyclerview}"
    implementation "com.jakewharton:butterknife:${deps.butterknife}"
    implementation "me.thekey.android:thekey-eventbus:${deps.thekey}"
    implementation "me.thekey.android:thekey-view-dialog-fragment:${deps.thekey}"
    implementation "uk.co.chrisjenx:calligraphy:${deps.calligraphy}"

    debugImplementation "androidx.multidex:multidex:${deps.androidX.multidex}"
    debugImplementation "org.ccci.gto.android:gto-support-api-okhttp3:${deps.gtoSupport}"
    debugImplementation "org.ccci.gto.android:gto-support-leakcanary:${deps.gtoSupport}"
    debugImplementation "org.ccci.gto.android:gto-support-stetho:${deps.gtoSupport}"
    debugImplementation "com.adobe.mobile:adobeMobileLibrary:${deps.adobeMobileServices}"
    debugImplementation "com.facebook.stetho:stetho:${deps.facebookStetho}"
    debugImplementation "com.facebook.stetho:stetho-timber:${deps.facebookStetho}"
    debugImplementation "com.jakewharton.timber:timber:${deps.timber}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${deps.facebookStetho}"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${deps.leakcanary}"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${deps.leakcanary}"

    kapt "com.jakewharton:butterknife-compiler:${deps.butterknife}"
    kapt "org.greenrobot:eventbus-annotation-processor:${deps.eventbus}"
}

// make crashlytics upload task dependent on the assemble task for all build variants
afterEvaluate {
    android.applicationVariants.all { variant ->
        def assembleTask = project.tasks.getByName("assemble${variant.name.capitalize()}")
        def crashlyticsTask = project.tasks.getByName("crashlyticsUploadDistribution${variant.name.capitalize()}")
        crashlyticsTask.dependsOn assembleTask
    }
}

def generateCrashlyticsBetaReleaseNotes(size = 10) {
    def output = "Recent changes:\n\n"
    grgit.log {
        maxCommits = size
    }.each { commit ->
        output = output + "* " + commit.shortMessage + "\n"
    }
    return output
}
