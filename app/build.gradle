apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'com.getkeepsafe.dexcount'

android {
    defaultConfig {
        applicationId rootProject.applicationId
        versionName rootProject.version

        proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        proguardFile 'proguard-rules.pro'
        proguardFile 'proguard-rules-crashlytics.pro'
        proguardFile 'proguard-rules-eventbus.pro'
        proguardFile 'proguard-rules-guava.pro'
        proguardFile 'proguard-searchview.pro'

        vectorDrawables.useSupportLibrary = true
    }
    buildFeatures {
        dataBinding = true
    }

    lintOptions {
        checkDependencies true
    }
    packagingOptions {
        // XXX: Exclude Kotlin metadata to reduce the size of the APK.
        //      If we ever start utilizing kotlin reflection this will need to be removed.
        exclude '**/*.kotlin_*'
    }

    kapt {
        javacOptions {
            option("-Adagger.fastInit=enabled")
        }
    }

    flavorDimensions "env"
    productFlavors {
        stage {
            dimension "env"

            buildConfigField "String", "MOBILE_CONTENT_API", "\"${uris.mobileContentApi.stage}\""
        }
        production {
            dimension "env"

            buildConfigField "String", "MOBILE_CONTENT_API", "\"${uris.mobileContentApi.production}\""
        }
    }

    signingConfigs {
        firebaseAppDistribution {
            storeFile rootProject.file(firebaseAppDistributionKeystorePath)
            storePassword firebaseAppDistributionKeystoreStorePassword
            keyAlias firebaseAppDistributionKeystoreKeyAlias
            keyPassword firebaseAppDistributionKeystoreKeyPassword
        }
        release {
            storeFile rootProject.file(androidKeystorePath)
            storePassword androidKeystoreStorePassword
            keyAlias androidKeystoreKeyAlias
            keyPassword androidKeystoreKeyPassword
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            multiDexEnabled true

            minifyEnabled false
            shrinkResources false

            resValue "string", "app_name_debug", "GodTools (Dev)"
        }
        qa {
            initWith debug
            matchingFallbacks = ['debug']

            applicationIdSuffix ".qa"
            versionNameSuffix "-qa"

            resValue "string", "app_name_debug", "GodTools (QA)"

            // Firebase App Distribution build
            if (project.hasProperty('firebaseAppDistributionBuild')) {
                signingConfig signingConfigs.firebaseAppDistribution

                firebaseAppDistribution {
                    appId = '1:71275134527:android:e6af54d704ba9adac5028a'
                    releaseNotes = generateFirebaseAppDistributionReleaseNotes()
                    serviceCredentialsFile = rootProject.file("firebase/firebase_api_key.json")
                    groups = 'android-testers'
                }
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            if (signingConfigs.release.storeFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
    sourceSets {
        qa {
            setRoot 'src/debug'
        }
    }

    variantFilter { variant ->
        // stage product flavors
        if (variant.flavors*.name.contains("stage")) {
            // ignore for non-debug build types
            if (variant.buildType.name != "debug") {
                setIgnore(true)
            }
        }
    }
}
kapt {
    arguments {
        arg('eventBusIndex', 'org.cru.godtools.AppEventBusIndex')
    }
}

configurations {
    qaImplementation.extendsFrom debugImplementation
}

dependencies {
    implementation project(':library:api')
    implementation project(':library:base')
    implementation project(':library:db')
    implementation project(':library:download-manager')
    implementation project(':library:initial-content')
    implementation project(':library:model')
    implementation project(':library:sync')

    implementation project(':ui:account')
    implementation project(':ui:article-renderer')
    implementation project(':ui:base')
    implementation project(':ui:base-app')
    implementation project(':ui:shortcuts')
    implementation project(':ui:tract-renderer')
    implementation project(':ui:tutorial-renderer')

    implementation "androidx.constraintlayout:constraintlayout:${deps.androidX.constraintLayout}"
    implementation "androidx.fragment:fragment-ktx:${deps.androidX.fragment}"
    implementation "androidx.lifecycle:lifecycle-extensions:${deps.androidX.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${deps.androidX.lifecycle}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${deps.androidX.swipeRefreshLayout}"
    implementation "androidx.work:work-runtime:${deps.androidX.work}"

    implementation "org.ccci.gto.android:gto-support-androidx-databinding:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-androidx-lifecycle:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-androidx-viewpager2:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-androidx-work:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-appcompat:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-base:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-compat:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-dagger:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-design:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-firebase-crashlytics:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-eventbus:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-picasso:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-recyclerview:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-recyclerview-advrecyclerview:${deps.gtoSupport}"
    implementation "org.ccci.gto.android:gto-support-util:${deps.gtoSupport}"

    implementation "com.google.firebase:firebase-crashlytics:${deps.firebase.crashlytics}"
    implementation "com.google.firebase:firebase-inappmessaging-display:${deps.firebase.inAppMessaging}"
    implementation "com.google.firebase:firebase-perf:${deps.firebase.perf}"

    implementation "com.getkeepsafe.taptargetview:taptargetview:${deps.taptargetview}"
    implementation "com.github.Karumi:WeakDelegate:${deps.weakdelegate}"
    implementation "com.google.android.instantapps:instantapps:${deps.androidInstantApps}"
    implementation "com.google.android.material:material:${deps.materialDesign}"
    implementation "com.google.dagger:dagger-android:${deps.dagger}"
    implementation "com.google.dagger:dagger-android-support:${deps.dagger}"
    implementation "com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:${deps.advrecyclerview}"
    implementation "com.jakewharton:butterknife:${deps.butterknife}"
    implementation "com.louiscad.splitties:splitties-fragmentargs:${deps.splitties}"
    implementation "com.sergivonavi:materialbanner:1.2.0"
    implementation "me.thekey.android:thekey-core:${deps.thekey}"
    implementation "me.thekey.android:thekey-eventbus:${deps.thekey}"
    implementation "me.thekey.android:thekey-livedata:${deps.thekey}"
    implementation "me.thekey.android:thekey-view-dialog-fragment:${deps.thekey}"
    implementation "com.pierfrancescosoffritti.androidyoutubeplayer:core:${deps.youtubeplayer}"

    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:${deps.assistedInject}"

    debugImplementation "androidx.multidex:multidex:${deps.androidX.multidex}"
    debugImplementation "org.ccci.gto.android:gto-support-facebook-flipper:${deps.gtoSupport}"
    debugImplementation "org.ccci.gto.android:gto-support-leakcanary2:${deps.gtoSupport}"
    debugImplementation "org.ccci.gto.android:gto-support-okhttp3:${deps.gtoSupport}"
    debugImplementation "com.facebook.flipper:flipper:${deps.facebookFlipper}"
    debugImplementation "com.facebook.flipper:flipper-network-plugin:${deps.facebookFlipper}"
    debugImplementation 'com.facebook.soloader:soloader:0.9.0'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${deps.leakcanary}"

    kapt "com.google.dagger:dagger-android-processor:${deps.dagger}"
    kapt "com.google.dagger:dagger-compiler:${deps.dagger}"
    kapt "com.jakewharton:butterknife-compiler:${deps.butterknife}"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:${deps.assistedInject}"
    kapt "org.greenrobot:eventbus-annotation-processor:${deps.eventbus}"
}

apply plugin: 'com.google.gms.google-services'

// make crashlytics upload task dependent on the assemble task for all build variants
afterEvaluate {
    android.applicationVariants.all { variant ->
        def assembleTask = project.tasks.getByName("assemble${variant.name.capitalize()}")

        def appDistributionTask = project.tasks.getByName("appDistributionUpload${variant.name.capitalize()}")
        appDistributionTask.dependsOn assembleTask
    }
}

def generateFirebaseAppDistributionReleaseNotes(size = 10) {
    def output = "Recent changes:\n\n"
    grgit.log {
        maxCommits = size
    }.each { commit ->
        output = output + "* " + commit.shortMessage + "\n"
    }
    return output
}
