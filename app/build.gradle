apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'dagger.hilt.android.plugin'

android {
    defaultConfig {
        applicationId rootProject.applicationId
        versionName rootProject.version

        proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        proguardFile 'proguard-rules.pro'
        proguardFile 'proguard-rules-crashlytics.pro'
        proguardFile 'proguard-rules-eventbus.pro'
        proguardFile 'proguard-rules-guava.pro'
        proguardFile 'proguard-rules-okta-oidc.pro'
        proguardFile 'proguard-searchview.pro'

        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "OKTA_CLIENT_ID", "\"0oa1ju0zx08vYGgbB0h8\""
        buildConfigField "String", "OKTA_DISCOVERY_URI", "\"https://signon.okta.com\""
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    packagingOptions {
        // XXX: Exclude Kotlin metadata to reduce the size of the APK.
        //      If we ever start utilizing kotlin reflection this will need to be removed.
        exclude '**/*.kotlin_*'
    }

    kapt {
        javacOptions {
            option("-Adagger.fastInit=enabled")
        }
    }

    flavorDimensions "env"
    productFlavors {
        stage {
            dimension "env"

            buildConfigField "String", "MOBILE_CONTENT_API", "\"${uris.mobileContentApi.stage}\""
        }
        production {
            dimension "env"

            buildConfigField "String", "MOBILE_CONTENT_API", "\"${uris.mobileContentApi.production}\""
        }
    }

    signingConfigs {
        firebaseAppDistribution {
            storeFile rootProject.file(firebaseAppDistributionKeystorePath)
            storePassword firebaseAppDistributionKeystoreStorePassword
            keyAlias firebaseAppDistributionKeystoreKeyAlias
            keyPassword firebaseAppDistributionKeystoreKeyPassword
        }
        release {
            storeFile rootProject.file(androidKeystorePath)
            storePassword androidKeystoreStorePassword
            keyAlias androidKeystoreKeyAlias
            keyPassword androidKeystoreKeyPassword
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            multiDexEnabled true

            minifyEnabled false
            shrinkResources false

            manifestPlaceholders += ["appAuthRedirectScheme": "org.cru.godtools.debug"]

            buildConfigField "String", "OKTA_AUTH_SCHEME", "\"org.cru.godtools.debug\""
            resValue "string", "app_name_debug", "GodTools (Dev)"
        }
        qa {
            initWith debug
            matchingFallbacks = ['debug']

            applicationIdSuffix ".qa"
            versionNameSuffix "-qa"

            manifestPlaceholders += ["appAuthRedirectScheme": "org.cru.godtools.qa"]

            buildConfigField "String", "OKTA_AUTH_SCHEME", "\"org.cru.godtools.qa\""
            resValue "string", "app_name_debug", "GodTools (QA)"

            // Firebase App Distribution build
            if (project.hasProperty('firebaseAppDistributionBuild')) {
                signingConfig signingConfigs.firebaseAppDistribution

                firebaseAppDistribution {
                    artifactPath = new File(buildDir, 'outputs/universal_apk/productionQa/app-production-qa-universal.apk')
                    releaseNotes = generateFirebaseAppDistributionReleaseNotes()
                    serviceCredentialsFile = rootProject.file("firebase/firebase_api_key.json")
                    groups = 'android-testers'
                }
            }
        }
        release {
            minifyEnabled true
            // TODO: this is disabled until it supports dynamic features in AS 4.2
//            shrinkResources true
            if (signingConfigs.release.storeFile.exists()) {
                signingConfig signingConfigs.release
            }

            manifestPlaceholders += ["appAuthRedirectScheme": "org.cru.godtools"]

            buildConfigField "String", "OKTA_AUTH_SCHEME", "\"org.cru.godtools\""
        }
    }
    bundle {
        language.enableSplit = false
    }
    dynamicFeatures = [
            ':feature:bundledcontent',
    ]

    sourceSets {
        qa {
            java.srcDir 'src/debug/java'
            res.srcDir 'src/debug/res/values'
            manifest.srcFile 'src/debug/AndroidManifest.xml'
        }
    }
}
kapt {
    arguments {
        arg('eventBusIndex', 'org.cru.godtools.AppEventBusIndex')
    }
}

configurations {
    qaImplementation.extendsFrom debugImplementation
}

dependencies {
    api project(':library:api')
    api project(':library:db')
    api project(':library:download-manager')
    implementation project(':library:base')
    implementation project(':library:model')
    implementation project(':library:sync')
    implementation project(':ui:article-renderer')
    implementation project(':ui:base')
    implementation project(':ui:cyoa-renderer')
    implementation project(':ui:lesson-renderer')
    implementation project(':ui:shortcuts')
    implementation project(':ui:tract-renderer')
    implementation project(':ui:tutorial-renderer')

    implementation libs.androidx.constraintlayout
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.hilt.work
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.swiperefreshlayout
    implementation libs.androidx.work

    implementation libs.gtoSupport.androidx.databinding
    implementation libs.gtoSupport.androidx.drawerlayout
    implementation libs.gtoSupport.androidx.fragment
    implementation libs.gtoSupport.androidx.lifecycle
    implementation libs.gtoSupport.androidx.viewpager2
    implementation libs.gtoSupport.androidx.work
    implementation libs.gtoSupport.appcompat
    implementation libs.gtoSupport.base
    implementation libs.gtoSupport.compat
    implementation libs.gtoSupport.dagger
    implementation libs.gtoSupport.eventbus
    implementation libs.gtoSupport.firebase.crashlytics
    implementation libs.gtoSupport.materialComponents
    implementation libs.gtoSupport.napier
    implementation libs.gtoSupport.okta
    implementation libs.gtoSupport.picasso
    implementation libs.gtoSupport.recyclerview
    implementation libs.gtoSupport.recyclerview.advrecyclerview
    implementation libs.gtoSupport.util

    implementation libs.firebase.crashlytics
    implementation libs.firebase.inappmessaging
    implementation libs.firebase.perf

    implementation libs.play.core
    implementation libs.play.instantapps

    api libs.eventbus
    implementation libs.advrecyclerview
    implementation libs.godtoolsMpp.parser
    implementation libs.hilt
    implementation libs.kotlin.coroutines.android
    implementation libs.lottie
    implementation libs.materialBanner
    implementation libs.materialComponents
    implementation libs.okta
    implementation libs.splitties.fragmentargs
    implementation libs.taptargetview
    implementation libs.weakdelegate
    implementation libs.youtubePlayer

    debugImplementation libs.firebase.crashlytics.ndk
    debugImplementation libs.facebook.flipper
    debugImplementation libs.facebook.flipper.plugins.network
    debugImplementation libs.facebook.soloader
    debugImplementation libs.gtoSupport.facebook.flipper
    debugImplementation libs.gtoSupport.leakcanary
    debugImplementation libs.gtoSupport.okhttp3
    debugImplementation libs.leakcanary

    kapt libs.dagger.compiler
    kapt libs.eventbus.annotationProcessor
    kapt libs.hilt.compiler

    testImplementation libs.gtoSupport.testing.dagger
    testImplementation libs.hilt.testing

    kaptTest libs.hilt.compiler
}

// make firebase upload task dependent on the package universal apk task for all build variants
afterEvaluate {
    android.applicationVariants.all { variant ->
        def packageTask = project.tasks.getByName("package${variant.name.capitalize()}UniversalApk")

        def appDistributionTask = project.tasks.getByName("appDistributionUpload${variant.name.capitalize()}")
        appDistributionTask.dependsOn packageTask
    }
}

def generateFirebaseAppDistributionReleaseNotes(size = 10) {
    def output = "Recent changes:\n\n"
    grgit.log {
        maxCommits = size
    }.each { commit ->
        output = output + "* " + commit.shortMessage + "\n"
    }
    return output
}
